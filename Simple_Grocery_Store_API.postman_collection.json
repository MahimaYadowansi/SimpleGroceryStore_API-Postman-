{
	"info": {
		"_postman_id": "8dc64ee5-b084-4878-beff-ef40dfdf7a3f",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38734170"
	},
	"item": [
		{
			"name": "PostiveTesting",
			"item": [
				{
					"name": "Products",
					"item": [
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.clear();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" const response = pm.response.json();\r",
											" //to get product\r",
											" const product=response[0];\r",
											" pm.expect(product).to.haveOwnProperty('inStock');\r",
											" pm.expect(product.inStock).to.be.true;\r",
											" pm.collectionVariables.set('productId',response[0].id);\r",
											"\r",
											"\r",
											"//to pass request data from one request to another , we will pass id=4643\r",
											"/*pm.test(\"At least one available product exists\",()=>{\r",
											"\r",
											"//check response is an array\r",
											"pm.expect(response).to.be.an('array');\r",
											"\r",
											"//there should be one value\r",
											"pm.expect(response.length).to.be.above(0);\r",
											"\r",
											"const productId=response[0].id;\r",
											"console.log(\"productId: \"+ productId);\r",
											"pm.collectionVariables.set('productId',response[0].id);\r",
											"});*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "category",
											"value": "milk",
											"description": " \"error\": \"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\"",
											"disabled": true
										},
										{
											"key": "category",
											"value": "bread-bakery",
											"description": "200 ok",
											"disabled": true
										},
										{
											"key": "results",
											"value": "15",
											"disabled": true
										},
										{
											"key": "available",
											"value": "true",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Sourdough Bread",
											"description": "It will not take this parameter because it is nit available in API documentation. API will simply ignore them.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Single Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.clear();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response=pm.response.json();\r",
											"console.log(pm.collectionVariables.get('productId'));\r",
											"\r",
											"//verify productId value is same as response id.\r",
											"const ProId=response.id;\r",
											"pm.test(\"Checking correct ProductId \",()=>{\r",
											"pm.expect(pm.collectionVariables.get('productId')).to.be.equals(ProId);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//check response is object\r",
											"pm.test(\"Response is object\", ()=>{\r",
											"   \r",
											"    pm.expect(response).to.be.an('object');\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"//checking the response\r",
											"//Here check for relevent data only . Nmae and price may change in future so always check for data which can not change such as \"instock\".\r",
											"pm.test(\"Product name \",() => {\r",
											"\r",
											"pm.expect(response.name).to.equals(\"Starbucks Coffee Variety Pack, 100% Arabica\");\r",
											"pm.expect(response.name).to.be.a('string');\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Product price \",() => {\r",
											"\r",
											"pm.expect(response.price).to.equals(40.91);\r",
											"\r",
											"});\r",
											"//price always changes so insead of price value we can check for its data type\r",
											"pm.test(\"Price data type\", ()=>{\r",
											"\r",
											"pm.expect(response.price).to.a('number');\r",
											"pm.expect(response.price).to.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Product is inStock \",() => {\r",
											"\r",
											"pm.expect(response.inStock).to.equals(true);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/:productId?product-label=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										":productId"
									],
									"query": [
										{
											"key": "product-label",
											"value": "true",
											"description": "Returns the product label in PDF format"
										}
									],
									"variable": [
										{
											"key": "productId",
											"value": "{{productId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Carts",
					"item": [
						{
							"name": "Create cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"const response=pm.response.json();\r",
											"const cartId=response.cartId;\r",
											"console.log(cartId);\r",
											"pm.collectionVariables.set('cartId',cartId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"created\": true,\r\n\"cartId\": \"bx0-ycNjqIm5IvufuuZ09\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add item to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Item is created\", () => {\r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.created).to.be.true;\r",
											"    pm.expect(response.itemId).to.be.a('number');\r",
											"    const itemId = response.itemId;\r",
											"    console.log(itemId);\r",
											"    pm.collectionVariables.set('ItemId', itemId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productId\": 1225,\r\n    \"quantity\" : 5\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId/items",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get cart items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId/items",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Modify an item in the cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//generate random value and pass to body's quantity\r",
											"\r",
											"\r",
											"function getRandomNumber(maxvalue){\r",
											"    return Math.floor(Math.random()*maxvalue);\r",
											"}\r",
											"//console.log(getRandomNumber(14));\r",
											"pm.collectionVariables.set('randomQuantity',getRandomNumber(14));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\":{{randomQuantity}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId",
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										},
										{
											"key": "itemId",
											"value": "{{ItemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace an item in the cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"productId\":{{productId}},\r\n    \"quantity\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId",
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "{{cartId}}"
										},
										{
											"key": "itemId",
											"value": "{{ItemId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an item in the cart",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/:cartId/items/:itemId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										":cartId",
										"items",
										":itemId"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "BB-9xneW9HQvCAMw6yq5e"
										},
										{
											"key": "itemId",
											"value": "609069593"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "Create a new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"const response=pm.response.json();\r",
											"const orderId=response.orderId;\r",
											"console.log(orderId);\r",
											"pm.collectionVariables.set('OrderId',orderId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"customerName\": \"Jakir Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders/:orderId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "{{OrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update order comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"comment\": \"Pick these goods from store\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders/:orderId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "{{OrderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.clear();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const response=pm.response.json();\r",
											" const orderId=pm.collectionVariables.get('OrderId');\r",
											"   // console.log(orderId);\r",
											"    //console.log(response[i].id);\r",
											"\r",
											"    pm.test(\"Created order is in list\",()=>\r",
											"    {\r",
											"        let isorderIdPresent=false;\r",
											"        for(let i=0;i<response.length;i++)\r",
											"{\r",
											"   \r",
											"    if(orderId===response[i].id)\r",
											"    {\r",
											"        isorderIdPresent=true;\r",
											"        console.log(\"Order ID is present. Have a look: \"+orderId);\r",
											"\r",
											"    }\r",
											"}\r",
											"pm.expect(isorderIdPresent).to.be.true;\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a single order",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/orders/:orderId?invoice=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"query": [
										{
											"key": "invoice",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "orderId",
											"value": "hLIhJWtEvbGh3sy0D5bLN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete orders",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/orders/:orderId",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "x_xra9f5Dw4agOaV6LTws"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "API Authentication",
					"item": [
						{
							"name": "Register a new API client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getRandomEmail(domain) {\r",
											"  // Generate a random string using Math.random()\r",
											"  const randomString = Math.random().toString(36).substring(7);\r",
											"  \r",
											"  // Concatenate the random string with the domain name\r",
											"  return `${randomString}@${domain}`;\r",
											"}\r",
											"\r",
											"// Example usage:\r",
											"const email = getRandomEmail(\"gmail.com\");\r",
											"\r",
											"pm.collectionVariables.set('email', email);\r",
											"console.log(email);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientName\": \"Postman on my computer\",\r\n    \"clientEmail\": \"{{email}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/api-clients",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"api-clients"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status should be \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    let resonsetime=pm.response.responseTime;\r",
									"    console.log(\"Response time is : \"+resonsetime);\r",
									"    pm.expect(resonsetime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/status",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NegativeTesting",
			"item": [
				{
					"name": "Order",
					"item": [
						{
							"name": "Missing Authentication",
							"item": [
								{
									"name": "Create a new order---invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const response=pm.response.json();\r",
													"//check error\r",
													"pm.test(\"Error message\",()=>{\r",
													"pm.expect(response.error).to.equals(\"Invalid bearer token.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "6b3fb248cff0528c8aced4db7c5c325dc2fd1384c55bed96aea0a61532aa3894",
												"description": "changed token value(add 4 in place of 3 at end)",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"2ECryRJgb1fezgLbDN8MG\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get orders ---invalid token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const response=pm.response.json();\r",
													"//check error\r",
													"pm.test(\"Error message\",()=>{\r",
													"pm.expect(response.error).to.equals(\"Invalid bearer token.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "6b3fb248cff0528c8aced4db7c5c325dc2fd1384c55bed96aea0a61532aa3894",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Missing header",
							"item": [
								{
									"name": "Get orders ----missing header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const response=pm.response.json();\r",
													"//check error\r",
													"pm.test(\"Error message\",()=>{\r",
													"pm.expect(response.error).to.equals(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "6b3fb248cff0528c8aced4db7c5c325dc2fd1384c55bed96aea0a61532aa3893",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create a new order--missing header",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"const response=pm.response.json();\r",
													"//check error\r",
													"pm.test(\"Error message\",()=>{\r",
													"pm.expect(response.error).to.equals(\"Missing Authorization header.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cartId\": \"2ECryRJgb1fezgLbDN8MG\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/orders",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "BoundryTesting--invalid inputs",
			"item": [
				{
					"name": "Get all products invalid  category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"const response=pm.response.json();\r",
									"pm.test(\"Error message\",()=>{\r",
									"    pm.expect(response.error).to.equals(\"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\",()=>{\r",
									"    pm.expect(response.error).to.contains(\"Invalid value for query parameter 'category'.\")});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?category=milk",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "milk",
									"description": " \"error\": \"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\""
								},
								{
									"key": "category",
									"value": "bread-bakery",
									"description": "200 ok",
									"disabled": true
								},
								{
									"key": "results",
									"value": "15",
									"disabled": true
								},
								{
									"key": "available",
									"value": "true",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Sourdough Bread",
									"description": "It will not take this parameter because it is nit available in API documentation. API will simply ignore them.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products invalid  result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"const response=pm.response.json();\r",
									"pm.test(\"Error message\",()=>{\r",
									"    pm.expect(response.error).to.equals(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?results=30",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "milk",
									"description": " \"error\": \"Invalid value for query parameter 'category'. Must be one of: meat-seafood, fresh-produce, candy, bread-bakery, dairy, eggs, coffee\"",
									"disabled": true
								},
								{
									"key": "category",
									"value": "bread-bakery",
									"description": "200 ok",
									"disabled": true
								},
								{
									"key": "results",
									"value": "30"
								},
								{
									"key": "available",
									"value": "true",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Sourdough Bread",
									"description": "It will not take this parameter because it is nit available in API documentation. API will simply ignore them.",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "6b3fb248cff0528c8aced4db7c5c325dc2fd1384c55bed96aea0a61532aa3893",
			"type": "string"
		},
		{
			"key": "FirstName",
			"value": "",
			"disabled": true
		},
		{
			"key": "productId",
			"value": 4643
		},
		{
			"key": "cartId",
			"value": "X1cX39lLBZ9a3XRWDt6L7"
		},
		{
			"key": "ItemId",
			"value": 344537851
		},
		{
			"key": "OrderId",
			"value": "vKuP27Krw7dmFgXmdHZgD"
		},
		{
			"key": "randomQuantity",
			"value": 2
		},
		{
			"key": "email",
			"value": "w7j4j@gmail.com"
		}
	]
}